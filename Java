import java.util.*;
import java.util.concurrent.*;
import java.util.stream.*;
import java.lang.reflect.*;

// Singleton Design Pattern for the Bank
class Bank {
    private static Bank instance;
    private Map<String, Account> accounts = new ConcurrentHashMap<>();
    
    private Bank() {} // private constructor to prevent instantiation
    
    public static synchronized Bank getInstance() {
        if (instance == null) {
            instance = new Bank();
        }
        return instance;
    }
    
    public void createAccount(String accountId, double balance) {
        accounts.put(accountId, new Account(accountId, balance));
    }
    
    public Account getAccount(String accountId) {
        return accounts.get(accountId);
    }

    public void printAllAccounts() {
        accounts.forEach((id, account) -> System.out.println(account));
    }
}

// Factory Design Pattern for creating different transaction types
interface Transaction {
    void execute();
}

class TransferTransaction implements Transaction {
    private Account from;
    private Account to;
    private double amount;

    public TransferTransaction(Account from, Account to, double amount) {
        this.from = from;
        this.to = to;
        this.amount = amount;
    }

    @Override
    public void execute() {
        synchronized (from) {
            synchronized (to) {
                if (from.getBalance() >= amount) {
                    from.debit(amount);
                    to.credit(amount);
                    System.out.println("Transferred " + amount + " from " + from.getAccountId() + " to " + to.getAccountId());
                } else {
                    System.out.println("Insufficient funds in " + from.getAccountId());
                }
            }
        }
    }
}

class DepositTransaction implements Transaction {
    private Account account;
    private double amount;

    public DepositTransaction(Account account, double amount) {
        this.account = account;
        this.amount = amount;
    }

    @Override
    public void execute() {
        synchronized (account) {
            account.credit(amount);
            System.out.println("Deposited " + amount + " into " + account.getAccountId());
        }
    }
}

class WithdrawTransaction implements Transaction {
    private Account account;
    private double amount;

    public WithdrawTransaction(Account account, double amount) {
        this.account = account;
        this.amount = amount;
    }

    @Override
    public void execute() {
        synchronized (account) {
            if (account.getBalance() >= amount) {
                account.debit(amount);
                System.out.println("Withdrew " + amount + " from " + account.getAccountId());
            } else {
                System.out.println("Insufficient funds in " + account.getAccountId());
            }
        }
    }
}

class TransactionFactory {
    public static Transaction createTransaction(String type, Account from, Account to, double amount) throws Exception {
        switch (type) {
            case "TRANSFER":
                return new TransferTransaction(from, to, amount);
            case "DEPOSIT":
                return new DepositTransaction(from, amount);
            case "WITHDRAW":
                return new WithdrawTransaction(from, amount);
            default:
                throw new IllegalArgumentException("Invalid transaction type");
        }
    }
}

// Custom Exception for Banking Errors
class BankException extends Exception {
    public BankException(String message) {
        super(message);
    }
}

// Account class with synchronization to ensure thread safety
class Account {
    private String accountId;
    private double balance;

    public Account(String accountId, double initialBalance) {
        this.accountId = accountId;
        this.balance = initialBalance;
    }

    public String getAccountId() {
        return accountId;
    }

    public double getBalance() {
        return balance;
    }

    public synchronized void credit(double amount) {
        balance += amount;
    }

    public synchronized void debit(double amount) {
        balance -= amount;
    }

    @Override
    public String toString() {
        return "Account{" +
                "accountId='" + accountId + '\'' +
                ", balance=" + balance +
                '}';
    }
}

// Bank simulation using multiple threads
class BankSimulator implements Runnable {
    private static final ExecutorService executor = Executors.newFixedThreadPool(10);
    private Bank bank;
    private String transactionType;
    private Account from;
    private Account to;
    private double amount;

    public BankSimulator(Bank bank, String transactionType, Account from, Account to, double amount) {
        this.bank = bank;
        this.transactionType = transactionType;
        this.from = from;
        this.to = to;
        this.amount = amount;
    }

    @Override
    public void run() {
        try {
            Transaction transaction = TransactionFactory.createTransaction(transactionType, from, to, amount);
            transaction.execute();
        } catch (Exception e) {
            System.err.println("Error executing transaction: " + e.getMessage());
        }
    }

    public static void simulateTransactions(Bank bank) {
        List<BankSimulator> tasks = new ArrayList<>();
        Account account1 = bank.getAccount("A1");
        Account account2 = bank.getAccount("A2");
        Account account3 = bank.getAccount("A3");

        // Simulate various transactions
        tasks.add(new BankSimulator(bank, "TRANSFER", account1, account2, 100));
        tasks.add(new BankSimulator(bank, "DEPOSIT", account1, null, 50));
        tasks.add(new BankSimulator(bank, "WITHDRAW", account2, null, 30));
        tasks.add(new BankSimulator(bank, "TRANSFER", account2, account3, 200));

        // Execute all tasks concurrently
        tasks.forEach(executor::submit);
    }

    public static void shutdown() {
        executor.shutdown();
    }
}

public class ComplexBankSimulation {
    public static void main(String[] args) throws InterruptedException {
        // Initialize the bank and accounts
        Bank bank = Bank.getInstance();
        bank.createAccount("A1", 500);
        bank.createAccount("A2", 200);
        bank.createAccount("A3", 1000);

        // Simulate transactions
        BankSimulator.simulateTransactions(bank);

        // Wait for all threads to finish
        Thread.sleep(2000);  // Simulate some waiting time for transactions to complete

        // Print account balances
        bank.printAllAccounts();
        BankSimulator.shutdown();
    }
}
